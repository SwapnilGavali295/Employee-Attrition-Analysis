2024-01-26 00:34:06,984:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-26 00:34:06,984:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-26 00:34:06,984:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-26 00:34:06,984:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-26 00:34:54,823:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-26 00:34:54,825:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-26 00:34:54,825:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-26 00:34:54,825:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-26 00:34:57,168:INFO:Initializing load_model()
2024-01-26 00:34:57,168:INFO:load_model(model_name=best-model, platform=None, authentication=None, verbose=True)
2024-01-26 00:34:57,913:INFO:Initializing predict_model()
2024-01-26 00:34:57,913:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000177FF873790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['EmployeeID', 'Age',
                                             'DistanceFromHome', 'Education',
                                             'EmployeeCount', 'JobLevel',
                                             'MonthlyIncome',
                                             'NumCompaniesWorked',
                                             'PercentSalaryHike',
                                             'StandardHours',
                                             'StockOptionLevel',
                                             'TotalWork...
                                                                    'JobRole',
                                                                    'MaritalStatus',
                                                                    'Over18'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('feature_selection',
                 TransformerWrapper(exclude=[],
                                    transformer=SelectFromModel(estimator=LGBMClassifier(),
                                                                max_features=5,
                                                                threshold=-inf))),
                ('trained_model',
                 RandomForestClassifier(n_jobs=-1, random_state=4312))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000177FF818820>)
2024-01-26 00:34:57,913:INFO:Checking exceptions
2024-01-26 00:34:57,913:INFO:Preloading libraries
2024-01-26 00:34:57,913:INFO:Set up data.
2024-01-26 00:34:57,925:INFO:Set up index.
2024-01-29 18:36:27,780:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-29 18:36:27,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-29 18:36:27,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-29 18:36:27,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-01-29 18:36:31,494:INFO:PyCaret ClassificationExperiment
2024-01-29 18:36:31,495:INFO:Logging name: Attrition
2024-01-29 18:36:31,495:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-01-29 18:36:31,495:INFO:version 3.2.0
2024-01-29 18:36:31,495:INFO:Initializing setup()
2024-01-29 18:36:31,495:INFO:self.USI: dabe
2024-01-29 18:36:31,495:INFO:self._variable_keys: {'fix_imbalance', 'pipeline', 'y_train', 'exp_name_log', '_ml_usecase', 'log_plots_param', 'y', 'y_test', 'exp_id', 'fold_groups_param', 'fold_generator', 'memory', 'X_test', '_available_plots', 'gpu_n_jobs_param', 'is_multiclass', 'seed', 'html_param', 'USI', 'logging_param', 'gpu_param', 'idx', 'X_train', 'fold_shuffle_param', 'target_param', 'data', 'X', 'n_jobs_param'}
2024-01-29 18:36:31,495:INFO:Checking environment
2024-01-29 18:36:31,495:INFO:python_version: 3.10.9
2024-01-29 18:36:31,495:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2024-01-29 18:36:31,496:INFO:machine: AMD64
2024-01-29 18:36:31,496:INFO:platform: Windows-10-10.0.22621-SP0
2024-01-29 18:36:31,496:INFO:Memory: svmem(total=14877257728, available=4693585920, percent=68.5, used=10183671808, free=4693585920)
2024-01-29 18:36:31,496:INFO:Physical Core: 8
2024-01-29 18:36:31,496:INFO:Logical Core: 16
2024-01-29 18:36:31,496:INFO:Checking libraries
2024-01-29 18:36:31,496:INFO:System:
2024-01-29 18:36:31,496:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2024-01-29 18:36:31,496:INFO:executable: D:\anconda\python.exe
2024-01-29 18:36:31,496:INFO:   machine: Windows-10-10.0.22621-SP0
2024-01-29 18:36:31,496:INFO:PyCaret required dependencies:
2024-01-29 18:36:32,315:INFO:                 pip: 23.2.1
2024-01-29 18:36:32,316:INFO:          setuptools: 65.6.3
2024-01-29 18:36:32,316:INFO:             pycaret: 3.2.0
2024-01-29 18:36:32,316:INFO:             IPython: 8.10.0
2024-01-29 18:36:32,316:INFO:          ipywidgets: 7.6.5
2024-01-29 18:36:32,316:INFO:                tqdm: 4.64.1
2024-01-29 18:36:32,316:INFO:               numpy: 1.23.5
2024-01-29 18:36:32,316:INFO:              pandas: 1.5.3
2024-01-29 18:36:32,316:INFO:              jinja2: 3.1.2
2024-01-29 18:36:32,316:INFO:               scipy: 1.10.0
2024-01-29 18:36:32,316:INFO:              joblib: 1.3.2
2024-01-29 18:36:32,316:INFO:             sklearn: 1.2.2
2024-01-29 18:36:32,316:INFO:                pyod: 1.1.2
2024-01-29 18:36:32,316:INFO:            imblearn: 0.10.1
2024-01-29 18:36:32,316:INFO:   category_encoders: 2.6.3
2024-01-29 18:36:32,316:INFO:            lightgbm: 4.2.0
2024-01-29 18:36:32,316:INFO:               numba: 0.56.4
2024-01-29 18:36:32,316:INFO:            requests: 2.28.1
2024-01-29 18:36:32,316:INFO:          matplotlib: 3.6.0
2024-01-29 18:36:32,316:INFO:          scikitplot: 0.3.7
2024-01-29 18:36:32,316:INFO:         yellowbrick: 1.5
2024-01-29 18:36:32,316:INFO:              plotly: 5.9.0
2024-01-29 18:36:32,316:INFO:    plotly-resampler: Not installed
2024-01-29 18:36:32,316:INFO:             kaleido: 0.2.1
2024-01-29 18:36:32,316:INFO:           schemdraw: 0.15
2024-01-29 18:36:32,316:INFO:         statsmodels: 0.13.5
2024-01-29 18:36:32,316:INFO:              sktime: 0.21.1
2024-01-29 18:36:32,316:INFO:               tbats: 1.1.3
2024-01-29 18:36:32,317:INFO:            pmdarima: 2.0.4
2024-01-29 18:36:32,317:INFO:              psutil: 5.9.0
2024-01-29 18:36:32,317:INFO:          markupsafe: 2.1.3
2024-01-29 18:36:32,317:INFO:             pickle5: Not installed
2024-01-29 18:36:32,317:INFO:         cloudpickle: 2.0.0
2024-01-29 18:36:32,317:INFO:         deprecation: 2.1.0
2024-01-29 18:36:32,317:INFO:              xxhash: 3.4.1
2024-01-29 18:36:32,317:INFO:           wurlitzer: Not installed
2024-01-29 18:36:32,317:INFO:PyCaret optional dependencies:
2024-01-29 18:36:32,333:INFO:                shap: Not installed
2024-01-29 18:36:32,334:INFO:           interpret: Not installed
2024-01-29 18:36:32,334:INFO:                umap: Not installed
2024-01-29 18:36:32,334:INFO:     ydata_profiling: 4.6.3
2024-01-29 18:36:32,334:INFO:  explainerdashboard: Not installed
2024-01-29 18:36:32,334:INFO:             autoviz: Not installed
2024-01-29 18:36:32,334:INFO:           fairlearn: Not installed
2024-01-29 18:36:32,334:INFO:          deepchecks: Not installed
2024-01-29 18:36:32,334:INFO:             xgboost: Not installed
2024-01-29 18:36:32,334:INFO:            catboost: Not installed
2024-01-29 18:36:32,334:INFO:              kmodes: Not installed
2024-01-29 18:36:32,334:INFO:             mlxtend: Not installed
2024-01-29 18:36:32,334:INFO:       statsforecast: Not installed
2024-01-29 18:36:32,334:INFO:        tune_sklearn: Not installed
2024-01-29 18:36:32,334:INFO:                 ray: Not installed
2024-01-29 18:36:32,334:INFO:            hyperopt: 0.2.7
2024-01-29 18:36:32,334:INFO:              optuna: Not installed
2024-01-29 18:36:32,334:INFO:               skopt: Not installed
2024-01-29 18:36:32,334:INFO:              mlflow: 2.9.2
2024-01-29 18:36:32,334:INFO:              gradio: Not installed
2024-01-29 18:36:32,334:INFO:             fastapi: Not installed
2024-01-29 18:36:32,334:INFO:             uvicorn: Not installed
2024-01-29 18:36:32,334:INFO:              m2cgen: Not installed
2024-01-29 18:36:32,334:INFO:           evidently: Not installed
2024-01-29 18:36:32,334:INFO:               fugue: Not installed
2024-01-29 18:36:32,334:INFO:           streamlit: 1.30.0
2024-01-29 18:36:32,334:INFO:             prophet: Not installed
2024-01-29 18:36:32,335:INFO:None
2024-01-29 18:36:32,335:INFO:Set up data.
2024-01-29 18:36:32,348:INFO:Set up folding strategy.
2024-01-29 18:36:32,348:INFO:Set up train/test split.
2024-01-29 18:36:32,358:INFO:Set up index.
2024-01-29 18:36:32,358:INFO:Assigning column types.
2024-01-29 18:36:32,361:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-01-29 18:36:32,399:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-01-29 18:36:32,401:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-29 18:36:32,431:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:32,431:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:32,469:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-01-29 18:36:32,469:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-29 18:36:32,492:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:32,493:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:32,493:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-01-29 18:36:32,531:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-29 18:36:32,554:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:32,554:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:32,592:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-01-29 18:36:32,616:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:32,616:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:32,616:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-01-29 18:36:32,675:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:32,676:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:32,736:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:32,736:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:32,745:INFO:Preparing preprocessing pipeline...
2024-01-29 18:36:32,747:INFO:Set up label encoding.
2024-01-29 18:36:32,747:INFO:Set up simple imputation.
2024-01-29 18:36:32,750:INFO:Set up encoding of ordinal features.
2024-01-29 18:36:32,751:INFO:Set up encoding of categorical features.
2024-01-29 18:36:32,752:INFO:Set up feature normalization.
2024-01-29 18:36:32,752:INFO:Set up feature selection.
2024-01-29 18:36:32,812:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:32,812:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:33,150:INFO:Finished creating preprocessing pipeline.
2024-01-29 18:36:33,174:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Swapnil\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['EmployeeID', 'Age',
                                             'DistanceFromHome', 'Education',
                                             'EmployeeCount', 'JobLevel',
                                             'MonthlyIncome',
                                             'NumC...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=5,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False)
2024-01-29 18:36:33,174:INFO:Creating final display dataframe.
2024-01-29 18:36:33,652:INFO:Setup _display_container:                     Description            Value
0                    Session id             3266
1                        Target        Attrition
2                   Target type           Binary
3                Target mapping    No: 0, Yes: 1
4           Original data shape       (4410, 29)
5        Transformed data shape        (4410, 6)
6   Transformed train set shape        (3087, 6)
7    Transformed test set shape        (1323, 6)
8              Ordinal features                1
9              Numeric features               21
10         Categorical features                7
11     Rows with missing values             2.5%
12                   Preprocess             True
13              Imputation type           simple
14           Numeric imputation             mean
15       Categorical imputation             mode
16     Maximum one-hot encoding               25
17              Encoding method             None
18                    Normalize             True
19             Normalize method           zscore
20            Feature selection             True
21     Feature selection method          classic
22  Feature selection estimator         lightgbm
23  Number of features selected              0.2
24               Fold Generator  StratifiedKFold
25                  Fold Number               10
26                     CPU Jobs               -1
27                      Use GPU            False
28               Log Experiment            False
29              Experiment Name        Attrition
30                          USI             dabe
2024-01-29 18:36:33,733:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:33,733:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:33,796:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:33,797:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:33,797:INFO:setup() successfully completed in 2.31s...............
2024-01-29 18:36:33,814:INFO:Initializing get_config()
2024-01-29 18:36:33,814:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, variable=X_train)
2024-01-29 18:36:33,814:INFO:Variable: 'X_train' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'X_train_transformed' instead.
2024-01-29 18:36:33,823:WARNING:D:\anconda\lib\site-packages\pycaret\internal\pycaret_experiment\pycaret_experiment.py:321: UserWarning: Variable: 'X_train' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'X_train_transformed' instead.
  warnings.warn(msg)  # print on screen

2024-01-29 18:36:33,832:INFO:Variable:  returned as       EmployeeID  Age     BusinessTravel              Department  \
4388        4389   33      Travel_Rarely                   Sales   
249          250   29      Travel_Rarely  Research & Development   
4060        4061   42      Travel_Rarely                   Sales   
171          172   46      Travel_Rarely                   Sales   
1492        1493   53      Travel_Rarely  Research & Development   
...          ...  ...                ...                     ...   
1073        1074   48      Travel_Rarely  Research & Development   
1583        1584   29      Travel_Rarely  Research & Development   
903          904   38      Travel_Rarely  Research & Development   
2347        2348   46      Travel_Rarely  Research & Development   
3663        3664   35  Travel_Frequently  Research & Development   

      DistanceFromHome  Education    EducationField  EmployeeCount  Gender  \
4388                 1          3     Life Sciences              1    Male   
249                  2          3     Life Sciences              1  Female   
4060                 1          3     Life Sciences              1  Female   
171                  4          1  Technical Degree              1    Male   
1492                11          4     Life Sciences              1  Female   
...                ...        ...               ...            ...     ...   
1073                 2          3     Life Sciences              1  Female   
1583                 1          3     Life Sciences              1  Female   
903                  2          4     Life Sciences              1  Female   
2347                12          4  Technical Degree              1    Male   
3663                 1          2           Medical              1    Male   

      JobLevel  ... TotalWorkingYears TrainingTimesLastYear  YearsAtCompany  \
4388         2  ...              13.0                     2               9   
249          1  ...               6.0                     2               6   
4060         1  ...              14.0                     3               0   
171          1  ...              26.0                     3               3   
1492         2  ...              21.0                     2               5   
...        ...  ...               ...                   ...             ...   
1073         2  ...              29.0                     3              22   
1583         2  ...               6.0                     6               3   
903          3  ...              10.0                     3               5   
2347         1  ...              27.0                     2              26   
3663         1  ...               5.0                     2               4   

      YearsSinceLastPromotion YearsWithCurrManager  EnvironmentSatisfaction  \
4388                        1                    7                      1.0   
249                         1                    2                      2.0   
4060                        0                    0                      2.0   
171                         0                    1                      1.0   
1492                        1                    3                      3.0   
...                       ...                  ...                      ...   
1073                       12                    9                      4.0   
1583                        1                    2                      4.0   
903                         0                    2                      4.0   
2347                        0                   12                      4.0   
3663                        3                    2                      4.0   

      JobSatisfaction  WorkLifeBalance  JobInvolvement  PerformanceRating  
4388              1.0              4.0               3                  3  
249               3.0              2.0               3                  3  
4060              4.0              3.0               3                  3  
171               3.0              1.0               2                  4  
1492              3.0              2.0               3                  3  
...               ...              ...             ...                ...  
1073              2.0              3.0               2                  3  
1583              4.0              3.0               4                  3  
903               3.0              4.0               3                  3  
2347              1.0              1.0               3                  3  
3663              3.0              2.0               3                  3  

[3087 rows x 28 columns]
2024-01-29 18:36:33,832:INFO:get_config() successfully completed......................................
2024-01-29 18:36:33,875:INFO:gpu_param set to False
2024-01-29 18:36:33,936:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:33,936:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:33,997:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:34,000:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-01-29 18:36:34,013:INFO:Initializing compare_models()
2024-01-29 18:36:34,013:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-01-29 18:36:34,013:INFO:Checking exceptions
2024-01-29 18:36:34,016:INFO:Preparing display monitor
2024-01-29 18:36:34,040:INFO:Initializing Logistic Regression
2024-01-29 18:36:34,040:INFO:Total runtime is 0.0 minutes
2024-01-29 18:36:34,043:INFO:SubProcess create_model() called ==================================
2024-01-29 18:36:34,043:INFO:Initializing create_model()
2024-01-29 18:36:34,043:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F507E339D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:36:34,043:INFO:Checking exceptions
2024-01-29 18:36:34,043:INFO:Importing libraries
2024-01-29 18:36:34,043:INFO:Copying training dataset
2024-01-29 18:36:34,046:INFO:Defining folds
2024-01-29 18:36:34,046:INFO:Declaring metric variables
2024-01-29 18:36:34,049:INFO:Importing untrained model
2024-01-29 18:36:34,052:INFO:Logistic Regression Imported successfully
2024-01-29 18:36:34,058:INFO:Starting cross validation
2024-01-29 18:36:34,064:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:36:43,322:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:43,331:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:43,334:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:36:43,337:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:43,700:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:43,706:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:43,709:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:36:43,712:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:43,829:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:43,835:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:43,838:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:36:43,841:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:43,871:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:43,877:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:43,880:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:36:43,883:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,005:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,008:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,011:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:36:44,011:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,020:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,023:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,026:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:36:44,029:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,038:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,041:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,041:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:36:44,044:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,053:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,056:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,059:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:36:44,061:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,069:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,072:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,075:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:36:44,078:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,198:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,201:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,203:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:36:44,203:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:44,224:INFO:Calculating mean and std
2024-01-29 18:36:44,224:INFO:Creating metrics dataframe
2024-01-29 18:36:44,227:INFO:Uploading results into container
2024-01-29 18:36:44,230:INFO:Uploading model into container now
2024-01-29 18:36:44,230:INFO:_master_model_container: 1
2024-01-29 18:36:44,230:INFO:_display_container: 2
2024-01-29 18:36:44,230:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3266, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-01-29 18:36:44,230:INFO:create_model() successfully completed......................................
2024-01-29 18:36:44,347:INFO:SubProcess create_model() end ==================================
2024-01-29 18:36:44,347:INFO:Creating metrics dataframe
2024-01-29 18:36:44,353:INFO:Initializing K Neighbors Classifier
2024-01-29 18:36:44,353:INFO:Total runtime is 0.17188700437545776 minutes
2024-01-29 18:36:44,356:INFO:SubProcess create_model() called ==================================
2024-01-29 18:36:44,356:INFO:Initializing create_model()
2024-01-29 18:36:44,356:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F507E339D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:36:44,356:INFO:Checking exceptions
2024-01-29 18:36:44,359:INFO:Importing libraries
2024-01-29 18:36:44,359:INFO:Copying training dataset
2024-01-29 18:36:44,365:INFO:Defining folds
2024-01-29 18:36:44,365:INFO:Declaring metric variables
2024-01-29 18:36:44,368:INFO:Importing untrained model
2024-01-29 18:36:44,371:INFO:K Neighbors Classifier Imported successfully
2024-01-29 18:36:44,377:INFO:Starting cross validation
2024-01-29 18:36:44,383:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:36:56,911:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:56,917:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:56,922:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:56,953:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:56,959:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:56,964:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,032:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,038:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,043:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,143:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,150:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,156:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,191:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,192:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,197:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,198:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,203:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,203:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,222:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,227:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,233:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,346:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,352:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,357:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,455:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,459:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,462:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,531:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,534:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,537:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:57,556:INFO:Calculating mean and std
2024-01-29 18:36:57,558:INFO:Creating metrics dataframe
2024-01-29 18:36:57,562:INFO:Uploading results into container
2024-01-29 18:36:57,563:INFO:Uploading model into container now
2024-01-29 18:36:57,564:INFO:_master_model_container: 2
2024-01-29 18:36:57,564:INFO:_display_container: 2
2024-01-29 18:36:57,564:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-01-29 18:36:57,564:INFO:create_model() successfully completed......................................
2024-01-29 18:36:57,697:INFO:SubProcess create_model() end ==================================
2024-01-29 18:36:57,697:INFO:Creating metrics dataframe
2024-01-29 18:36:57,706:INFO:Initializing Naive Bayes
2024-01-29 18:36:57,706:INFO:Total runtime is 0.3944324572881063 minutes
2024-01-29 18:36:57,708:INFO:SubProcess create_model() called ==================================
2024-01-29 18:36:57,709:INFO:Initializing create_model()
2024-01-29 18:36:57,709:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F507E339D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:36:57,709:INFO:Checking exceptions
2024-01-29 18:36:57,709:INFO:Importing libraries
2024-01-29 18:36:57,709:INFO:Copying training dataset
2024-01-29 18:36:57,716:INFO:Defining folds
2024-01-29 18:36:57,716:INFO:Declaring metric variables
2024-01-29 18:36:57,719:INFO:Importing untrained model
2024-01-29 18:36:57,723:INFO:Naive Bayes Imported successfully
2024-01-29 18:36:57,729:INFO:Starting cross validation
2024-01-29 18:36:57,736:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:36:58,458:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,463:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,469:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,555:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,562:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,566:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,568:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,570:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,570:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,571:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,575:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,576:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,577:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,580:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,581:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,680:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,684:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,685:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,689:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,691:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,695:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,696:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,697:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,701:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,702:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,707:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,707:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,767:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,770:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,773:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:58,783:INFO:Calculating mean and std
2024-01-29 18:36:58,784:INFO:Creating metrics dataframe
2024-01-29 18:36:58,787:INFO:Uploading results into container
2024-01-29 18:36:58,788:INFO:Uploading model into container now
2024-01-29 18:36:58,789:INFO:_master_model_container: 3
2024-01-29 18:36:58,789:INFO:_display_container: 2
2024-01-29 18:36:58,789:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-01-29 18:36:58,789:INFO:create_model() successfully completed......................................
2024-01-29 18:36:58,900:INFO:SubProcess create_model() end ==================================
2024-01-29 18:36:58,901:INFO:Creating metrics dataframe
2024-01-29 18:36:58,909:INFO:Initializing Decision Tree Classifier
2024-01-29 18:36:58,909:INFO:Total runtime is 0.41448795000712074 minutes
2024-01-29 18:36:58,912:INFO:SubProcess create_model() called ==================================
2024-01-29 18:36:58,912:INFO:Initializing create_model()
2024-01-29 18:36:58,913:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F507E339D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:36:58,913:INFO:Checking exceptions
2024-01-29 18:36:58,913:INFO:Importing libraries
2024-01-29 18:36:58,913:INFO:Copying training dataset
2024-01-29 18:36:58,918:INFO:Defining folds
2024-01-29 18:36:58,919:INFO:Declaring metric variables
2024-01-29 18:36:58,922:INFO:Importing untrained model
2024-01-29 18:36:58,925:INFO:Decision Tree Classifier Imported successfully
2024-01-29 18:36:58,931:INFO:Starting cross validation
2024-01-29 18:36:58,938:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:36:59,728:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,733:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,739:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,765:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,770:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,773:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,775:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,779:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,784:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,794:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,799:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,805:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,825:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,830:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,835:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,887:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,893:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,898:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,901:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,911:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,921:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,922:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,928:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,933:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,948:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,952:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:36:59,957:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:00,012:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:00,017:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:00,021:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:00,030:INFO:Calculating mean and std
2024-01-29 18:37:00,031:INFO:Creating metrics dataframe
2024-01-29 18:37:00,035:INFO:Uploading results into container
2024-01-29 18:37:00,035:INFO:Uploading model into container now
2024-01-29 18:37:00,036:INFO:_master_model_container: 4
2024-01-29 18:37:00,036:INFO:_display_container: 2
2024-01-29 18:37:00,037:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3266, splitter='best')
2024-01-29 18:37:00,037:INFO:create_model() successfully completed......................................
2024-01-29 18:37:00,147:INFO:SubProcess create_model() end ==================================
2024-01-29 18:37:00,147:INFO:Creating metrics dataframe
2024-01-29 18:37:00,156:INFO:Initializing SVM - Linear Kernel
2024-01-29 18:37:00,157:INFO:Total runtime is 0.435285218556722 minutes
2024-01-29 18:37:00,160:INFO:SubProcess create_model() called ==================================
2024-01-29 18:37:00,160:INFO:Initializing create_model()
2024-01-29 18:37:00,160:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F507E339D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:37:00,160:INFO:Checking exceptions
2024-01-29 18:37:00,160:INFO:Importing libraries
2024-01-29 18:37:00,160:INFO:Copying training dataset
2024-01-29 18:37:00,166:INFO:Defining folds
2024-01-29 18:37:00,166:INFO:Declaring metric variables
2024-01-29 18:37:00,169:INFO:Importing untrained model
2024-01-29 18:37:00,172:INFO:SVM - Linear Kernel Imported successfully
2024-01-29 18:37:00,178:INFO:Starting cross validation
2024-01-29 18:37:00,185:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:37:01,004:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "D:\anconda\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "D:\anconda\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-29 18:37:01,006:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,007:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,012:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,013:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,015:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:01,015:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:01,017:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,018:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,023:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "D:\anconda\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "D:\anconda\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-29 18:37:01,025:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "D:\anconda\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "D:\anconda\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-29 18:37:01,026:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,028:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,032:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,033:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,035:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:01,036:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:01,046:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,057:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,083:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "D:\anconda\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "D:\anconda\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-29 18:37:01,085:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,091:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,094:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:01,096:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,101:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "D:\anconda\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "D:\anconda\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-29 18:37:01,104:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,109:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,112:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:01,115:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,118:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "D:\anconda\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "D:\anconda\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-29 18:37:01,120:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,125:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "D:\anconda\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "D:\anconda\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-29 18:37:01,126:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,128:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,128:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:01,131:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,132:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,134:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:01,137:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,186:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "D:\anconda\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "D:\anconda\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-29 18:37:01,188:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,193:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,195:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:01,195:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "D:\anconda\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "D:\anconda\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2024-01-29 18:37:01,197:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,198:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,202:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,204:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:01,206:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:01,217:INFO:Calculating mean and std
2024-01-29 18:37:01,218:INFO:Creating metrics dataframe
2024-01-29 18:37:01,222:INFO:Uploading results into container
2024-01-29 18:37:01,223:INFO:Uploading model into container now
2024-01-29 18:37:01,223:INFO:_master_model_container: 5
2024-01-29 18:37:01,223:INFO:_display_container: 2
2024-01-29 18:37:01,223:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=3266, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-01-29 18:37:01,223:INFO:create_model() successfully completed......................................
2024-01-29 18:37:01,337:INFO:SubProcess create_model() end ==================================
2024-01-29 18:37:01,337:INFO:Creating metrics dataframe
2024-01-29 18:37:01,345:INFO:Initializing Ridge Classifier
2024-01-29 18:37:01,346:INFO:Total runtime is 0.4550992131233215 minutes
2024-01-29 18:37:01,349:INFO:SubProcess create_model() called ==================================
2024-01-29 18:37:01,349:INFO:Initializing create_model()
2024-01-29 18:37:01,349:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F507E339D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:37:01,349:INFO:Checking exceptions
2024-01-29 18:37:01,349:INFO:Importing libraries
2024-01-29 18:37:01,349:INFO:Copying training dataset
2024-01-29 18:37:01,354:INFO:Defining folds
2024-01-29 18:37:01,355:INFO:Declaring metric variables
2024-01-29 18:37:01,358:INFO:Importing untrained model
2024-01-29 18:37:01,361:INFO:Ridge Classifier Imported successfully
2024-01-29 18:37:01,367:INFO:Starting cross validation
2024-01-29 18:37:01,374:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:37:02,249:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-29 18:37:02,253:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,257:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-29 18:37:02,257:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,261:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,261:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:02,265:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,265:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,265:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-29 18:37:02,265:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:02,269:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,269:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,269:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-29 18:37:02,273:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-29 18:37:02,273:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-29 18:37:02,273:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,273:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,273:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,273:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,277:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:02,281:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,281:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,281:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-29 18:37:02,281:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,281:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,281:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:02,281:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:02,281:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,281:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:02,285:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,285:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-29 18:37:02,285:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,285:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,285:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,289:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,289:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:02,293:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,293:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,297:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:02,297:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,365:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-29 18:37:02,365:WARNING:D:\anconda\lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\anconda\lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "D:\anconda\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "D:\anconda\lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2024-01-29 18:37:02,365:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,369:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,369:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,373:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,373:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:02,377:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:02,377:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,377:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:02,397:INFO:Calculating mean and std
2024-01-29 18:37:02,397:INFO:Creating metrics dataframe
2024-01-29 18:37:02,401:INFO:Uploading results into container
2024-01-29 18:37:02,401:INFO:Uploading model into container now
2024-01-29 18:37:02,401:INFO:_master_model_container: 6
2024-01-29 18:37:02,401:INFO:_display_container: 2
2024-01-29 18:37:02,401:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=3266, solver='auto',
                tol=0.0001)
2024-01-29 18:37:02,401:INFO:create_model() successfully completed......................................
2024-01-29 18:37:02,521:INFO:SubProcess create_model() end ==================================
2024-01-29 18:37:02,521:INFO:Creating metrics dataframe
2024-01-29 18:37:02,533:INFO:Initializing Random Forest Classifier
2024-01-29 18:37:02,533:INFO:Total runtime is 0.47488937377929685 minutes
2024-01-29 18:37:02,537:INFO:SubProcess create_model() called ==================================
2024-01-29 18:37:02,537:INFO:Initializing create_model()
2024-01-29 18:37:02,537:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F507E339D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:37:02,537:INFO:Checking exceptions
2024-01-29 18:37:02,537:INFO:Importing libraries
2024-01-29 18:37:02,537:INFO:Copying training dataset
2024-01-29 18:37:02,541:INFO:Defining folds
2024-01-29 18:37:02,541:INFO:Declaring metric variables
2024-01-29 18:37:02,545:INFO:Importing untrained model
2024-01-29 18:37:02,549:INFO:Random Forest Classifier Imported successfully
2024-01-29 18:37:02,557:INFO:Starting cross validation
2024-01-29 18:37:02,561:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:37:03,842:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:03,846:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:03,854:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:03,866:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:03,870:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:03,878:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:03,928:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:03,928:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:03,932:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:03,940:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:03,940:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:03,992:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:03,992:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:03,996:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:03,996:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,000:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,004:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,041:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,045:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,050:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,242:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,246:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,246:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,306:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,311:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,311:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,323:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,327:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,327:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:04,347:INFO:Calculating mean and std
2024-01-29 18:37:04,347:INFO:Creating metrics dataframe
2024-01-29 18:37:04,349:INFO:Uploading results into container
2024-01-29 18:37:04,349:INFO:Uploading model into container now
2024-01-29 18:37:04,353:INFO:_master_model_container: 7
2024-01-29 18:37:04,353:INFO:_display_container: 2
2024-01-29 18:37:04,353:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False)
2024-01-29 18:37:04,353:INFO:create_model() successfully completed......................................
2024-01-29 18:37:04,466:INFO:SubProcess create_model() end ==================================
2024-01-29 18:37:04,466:INFO:Creating metrics dataframe
2024-01-29 18:37:04,473:INFO:Initializing Quadratic Discriminant Analysis
2024-01-29 18:37:04,473:INFO:Total runtime is 0.5072188297907512 minutes
2024-01-29 18:37:04,477:INFO:SubProcess create_model() called ==================================
2024-01-29 18:37:04,477:INFO:Initializing create_model()
2024-01-29 18:37:04,477:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F507E339D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:37:04,477:INFO:Checking exceptions
2024-01-29 18:37:04,477:INFO:Importing libraries
2024-01-29 18:37:04,477:INFO:Copying training dataset
2024-01-29 18:37:04,481:INFO:Defining folds
2024-01-29 18:37:04,481:INFO:Declaring metric variables
2024-01-29 18:37:04,485:INFO:Importing untrained model
2024-01-29 18:37:04,489:INFO:Quadratic Discriminant Analysis Imported successfully
2024-01-29 18:37:04,493:INFO:Starting cross validation
2024-01-29 18:37:04,501:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:37:05,405:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,411:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,417:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,417:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,421:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,425:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,425:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,429:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:05,429:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,429:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,429:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,433:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:05,433:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,433:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,441:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,445:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,445:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,449:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,449:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,449:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:05,453:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,453:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,453:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,453:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,453:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,457:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,457:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:05,457:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:05,457:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,457:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,457:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,457:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,461:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:05,461:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,461:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:05,469:INFO:Calculating mean and std
2024-01-29 18:37:05,469:INFO:Creating metrics dataframe
2024-01-29 18:37:05,473:INFO:Uploading results into container
2024-01-29 18:37:05,473:INFO:Uploading model into container now
2024-01-29 18:37:05,473:INFO:_master_model_container: 8
2024-01-29 18:37:05,473:INFO:_display_container: 2
2024-01-29 18:37:05,473:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-01-29 18:37:05,473:INFO:create_model() successfully completed......................................
2024-01-29 18:37:05,586:INFO:SubProcess create_model() end ==================================
2024-01-29 18:37:05,586:INFO:Creating metrics dataframe
2024-01-29 18:37:05,596:INFO:Initializing Ada Boost Classifier
2024-01-29 18:37:05,596:INFO:Total runtime is 0.5259386102358501 minutes
2024-01-29 18:37:05,599:INFO:SubProcess create_model() called ==================================
2024-01-29 18:37:05,599:INFO:Initializing create_model()
2024-01-29 18:37:05,599:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F507E339D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:37:05,599:INFO:Checking exceptions
2024-01-29 18:37:05,599:INFO:Importing libraries
2024-01-29 18:37:05,599:INFO:Copying training dataset
2024-01-29 18:37:05,602:INFO:Defining folds
2024-01-29 18:37:05,602:INFO:Declaring metric variables
2024-01-29 18:37:05,606:INFO:Importing untrained model
2024-01-29 18:37:05,611:INFO:Ada Boost Classifier Imported successfully
2024-01-29 18:37:05,618:INFO:Starting cross validation
2024-01-29 18:37:05,622:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:37:06,635:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,643:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,643:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,647:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,651:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,651:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,655:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,659:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,663:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,751:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,759:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,763:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,939:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,943:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,943:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,951:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,951:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,955:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,955:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,955:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,959:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,963:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,967:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:06,967:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:07,012:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:07,015:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:07,019:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:07,027:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:07,031:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:07,035:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:07,054:INFO:Calculating mean and std
2024-01-29 18:37:07,056:INFO:Creating metrics dataframe
2024-01-29 18:37:07,058:INFO:Uploading results into container
2024-01-29 18:37:07,058:INFO:Uploading model into container now
2024-01-29 18:37:07,058:INFO:_master_model_container: 9
2024-01-29 18:37:07,058:INFO:_display_container: 2
2024-01-29 18:37:07,058:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=3266)
2024-01-29 18:37:07,058:INFO:create_model() successfully completed......................................
2024-01-29 18:37:07,170:INFO:SubProcess create_model() end ==================================
2024-01-29 18:37:07,170:INFO:Creating metrics dataframe
2024-01-29 18:37:07,182:INFO:Initializing Gradient Boosting Classifier
2024-01-29 18:37:07,182:INFO:Total runtime is 0.5523734211921693 minutes
2024-01-29 18:37:07,182:INFO:SubProcess create_model() called ==================================
2024-01-29 18:37:07,182:INFO:Initializing create_model()
2024-01-29 18:37:07,182:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F507E339D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:37:07,182:INFO:Checking exceptions
2024-01-29 18:37:07,186:INFO:Importing libraries
2024-01-29 18:37:07,186:INFO:Copying training dataset
2024-01-29 18:37:07,190:INFO:Defining folds
2024-01-29 18:37:07,190:INFO:Declaring metric variables
2024-01-29 18:37:07,194:INFO:Importing untrained model
2024-01-29 18:37:07,198:INFO:Gradient Boosting Classifier Imported successfully
2024-01-29 18:37:07,202:INFO:Starting cross validation
2024-01-29 18:37:07,210:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:37:08,328:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,336:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,336:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,336:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,340:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,344:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,344:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,344:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,348:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,368:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,372:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,376:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,740:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,740:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,744:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,744:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,744:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,748:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,748:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,748:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,752:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,784:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,784:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,788:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,840:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,840:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,840:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,844:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,844:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,848:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:08,870:INFO:Calculating mean and std
2024-01-29 18:37:08,870:INFO:Creating metrics dataframe
2024-01-29 18:37:08,874:INFO:Uploading results into container
2024-01-29 18:37:08,874:INFO:Uploading model into container now
2024-01-29 18:37:08,874:INFO:_master_model_container: 10
2024-01-29 18:37:08,874:INFO:_display_container: 2
2024-01-29 18:37:08,874:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3266, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-01-29 18:37:08,874:INFO:create_model() successfully completed......................................
2024-01-29 18:37:08,987:INFO:SubProcess create_model() end ==================================
2024-01-29 18:37:08,987:INFO:Creating metrics dataframe
2024-01-29 18:37:08,999:INFO:Initializing Linear Discriminant Analysis
2024-01-29 18:37:08,999:INFO:Total runtime is 0.5826482017834982 minutes
2024-01-29 18:37:08,999:INFO:SubProcess create_model() called ==================================
2024-01-29 18:37:08,999:INFO:Initializing create_model()
2024-01-29 18:37:08,999:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F507E339D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:37:08,999:INFO:Checking exceptions
2024-01-29 18:37:08,999:INFO:Importing libraries
2024-01-29 18:37:08,999:INFO:Copying training dataset
2024-01-29 18:37:09,007:INFO:Defining folds
2024-01-29 18:37:09,007:INFO:Declaring metric variables
2024-01-29 18:37:09,011:INFO:Importing untrained model
2024-01-29 18:37:09,014:INFO:Linear Discriminant Analysis Imported successfully
2024-01-29 18:37:09,019:INFO:Starting cross validation
2024-01-29 18:37:09,023:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:37:09,828:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,836:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,836:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,836:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:09,840:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,840:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,844:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:09,844:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,868:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,868:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,872:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,872:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,876:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:09,876:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:09,880:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,880:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,944:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,952:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,956:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,956:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:09,956:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,960:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,964:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:09,964:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,992:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:09,996:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:10,000:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:10,000:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:10,008:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:10,016:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:10,016:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:10,020:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:10,032:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:10,036:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:10,040:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:10,044:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:10,056:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:10,060:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:10,060:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:10,064:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:10,080:INFO:Calculating mean and std
2024-01-29 18:37:10,080:INFO:Creating metrics dataframe
2024-01-29 18:37:10,084:INFO:Uploading results into container
2024-01-29 18:37:10,084:INFO:Uploading model into container now
2024-01-29 18:37:10,084:INFO:_master_model_container: 11
2024-01-29 18:37:10,084:INFO:_display_container: 2
2024-01-29 18:37:10,084:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-01-29 18:37:10,084:INFO:create_model() successfully completed......................................
2024-01-29 18:37:10,200:INFO:SubProcess create_model() end ==================================
2024-01-29 18:37:10,200:INFO:Creating metrics dataframe
2024-01-29 18:37:10,212:INFO:Initializing Extra Trees Classifier
2024-01-29 18:37:10,212:INFO:Total runtime is 0.6028623898824057 minutes
2024-01-29 18:37:10,216:INFO:SubProcess create_model() called ==================================
2024-01-29 18:37:10,216:INFO:Initializing create_model()
2024-01-29 18:37:10,216:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F507E339D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:37:10,216:INFO:Checking exceptions
2024-01-29 18:37:10,216:INFO:Importing libraries
2024-01-29 18:37:10,216:INFO:Copying training dataset
2024-01-29 18:37:10,220:INFO:Defining folds
2024-01-29 18:37:10,220:INFO:Declaring metric variables
2024-01-29 18:37:10,224:INFO:Importing untrained model
2024-01-29 18:37:10,228:INFO:Extra Trees Classifier Imported successfully
2024-01-29 18:37:10,232:INFO:Starting cross validation
2024-01-29 18:37:10,240:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:37:11,274:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,282:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,286:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,394:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,400:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,406:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,409:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,415:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,421:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,424:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,430:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,436:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,454:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,460:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,466:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,530:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,530:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,530:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,534:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,534:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,534:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,546:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,550:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,554:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,602:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,606:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,610:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,676:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,680:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,680:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:11,700:INFO:Calculating mean and std
2024-01-29 18:37:11,700:INFO:Creating metrics dataframe
2024-01-29 18:37:11,704:INFO:Uploading results into container
2024-01-29 18:37:11,704:INFO:Uploading model into container now
2024-01-29 18:37:11,704:INFO:_master_model_container: 12
2024-01-29 18:37:11,704:INFO:_display_container: 2
2024-01-29 18:37:11,704:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=3266, verbose=0, warm_start=False)
2024-01-29 18:37:11,704:INFO:create_model() successfully completed......................................
2024-01-29 18:37:11,821:INFO:SubProcess create_model() end ==================================
2024-01-29 18:37:11,821:INFO:Creating metrics dataframe
2024-01-29 18:37:11,829:INFO:Initializing Light Gradient Boosting Machine
2024-01-29 18:37:11,829:INFO:Total runtime is 0.6298114816347758 minutes
2024-01-29 18:37:11,833:INFO:SubProcess create_model() called ==================================
2024-01-29 18:37:11,833:INFO:Initializing create_model()
2024-01-29 18:37:11,833:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F507E339D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:37:11,833:INFO:Checking exceptions
2024-01-29 18:37:11,833:INFO:Importing libraries
2024-01-29 18:37:11,833:INFO:Copying training dataset
2024-01-29 18:37:11,837:INFO:Defining folds
2024-01-29 18:37:11,837:INFO:Declaring metric variables
2024-01-29 18:37:11,841:INFO:Importing untrained model
2024-01-29 18:37:11,845:INFO:Light Gradient Boosting Machine Imported successfully
2024-01-29 18:37:11,849:INFO:Starting cross validation
2024-01-29 18:37:11,857:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:37:13,151:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,155:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,159:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,171:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,175:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,175:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,183:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,183:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,183:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,187:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,191:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,272:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,276:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,284:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,288:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,294:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,299:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,300:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,304:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,304:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,308:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,312:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,318:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,424:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,432:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,436:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,444:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,448:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,452:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:13,472:INFO:Calculating mean and std
2024-01-29 18:37:13,472:INFO:Creating metrics dataframe
2024-01-29 18:37:13,476:INFO:Uploading results into container
2024-01-29 18:37:13,476:INFO:Uploading model into container now
2024-01-29 18:37:13,476:INFO:_master_model_container: 13
2024-01-29 18:37:13,476:INFO:_display_container: 2
2024-01-29 18:37:13,480:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=3266, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-01-29 18:37:13,480:INFO:create_model() successfully completed......................................
2024-01-29 18:37:13,604:INFO:SubProcess create_model() end ==================================
2024-01-29 18:37:13,604:INFO:Creating metrics dataframe
2024-01-29 18:37:13,618:INFO:Initializing Dummy Classifier
2024-01-29 18:37:13,618:INFO:Total runtime is 0.6596327344576518 minutes
2024-01-29 18:37:13,618:INFO:SubProcess create_model() called ==================================
2024-01-29 18:37:13,621:INFO:Initializing create_model()
2024-01-29 18:37:13,621:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F507E339D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:37:13,621:INFO:Checking exceptions
2024-01-29 18:37:13,621:INFO:Importing libraries
2024-01-29 18:37:13,621:INFO:Copying training dataset
2024-01-29 18:37:13,626:INFO:Defining folds
2024-01-29 18:37:13,626:INFO:Declaring metric variables
2024-01-29 18:37:13,630:INFO:Importing untrained model
2024-01-29 18:37:13,633:INFO:Dummy Classifier Imported successfully
2024-01-29 18:37:13,637:INFO:Starting cross validation
2024-01-29 18:37:13,645:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:37:14,294:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,303:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,303:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:14,307:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,419:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,426:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,426:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:14,430:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,430:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,434:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,438:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:14,442:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,442:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,442:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,450:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,450:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,450:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:14,450:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:14,454:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,454:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,538:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,542:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,542:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,547:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:14,547:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,547:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,551:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,551:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:14,551:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,551:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,555:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:14,559:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,604:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,608:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,608:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:14,612:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,632:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,636:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,636:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2024-01-29 18:37:14,640:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:14,660:INFO:Calculating mean and std
2024-01-29 18:37:14,660:INFO:Creating metrics dataframe
2024-01-29 18:37:14,664:INFO:Uploading results into container
2024-01-29 18:37:14,664:INFO:Uploading model into container now
2024-01-29 18:37:14,664:INFO:_master_model_container: 14
2024-01-29 18:37:14,664:INFO:_display_container: 2
2024-01-29 18:37:14,664:INFO:DummyClassifier(constant=None, random_state=3266, strategy='prior')
2024-01-29 18:37:14,664:INFO:create_model() successfully completed......................................
2024-01-29 18:37:14,781:INFO:SubProcess create_model() end ==================================
2024-01-29 18:37:14,781:INFO:Creating metrics dataframe
2024-01-29 18:37:14,800:INFO:Initializing create_model()
2024-01-29 18:37:14,800:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:37:14,800:INFO:Checking exceptions
2024-01-29 18:37:14,800:INFO:Importing libraries
2024-01-29 18:37:14,800:INFO:Copying training dataset
2024-01-29 18:37:14,809:INFO:Defining folds
2024-01-29 18:37:14,809:INFO:Declaring metric variables
2024-01-29 18:37:14,809:INFO:Importing untrained model
2024-01-29 18:37:14,809:INFO:Declaring custom model
2024-01-29 18:37:14,809:INFO:Random Forest Classifier Imported successfully
2024-01-29 18:37:14,813:INFO:Cross validation set to False
2024-01-29 18:37:14,813:INFO:Fitting Model
2024-01-29 18:37:14,925:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2024-01-29 18:37:14,925:INFO:[LightGBM] [Info] Number of positive: 498, number of negative: 2589
2024-01-29 18:37:14,925:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000239 seconds.
2024-01-29 18:37:14,925:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-01-29 18:37:14,925:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-01-29 18:37:14,925:INFO:[LightGBM] [Info] Total Bins 849
2024-01-29 18:37:14,925:INFO:[LightGBM] [Info] Number of data points in the train set: 3087, number of used features: 44
2024-01-29 18:37:14,929:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.161322 -> initscore=-1.648427
2024-01-29 18:37:14,929:INFO:[LightGBM] [Info] Start training from score -1.648427
2024-01-29 18:37:15,161:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False)
2024-01-29 18:37:15,161:INFO:create_model() successfully completed......................................
2024-01-29 18:37:15,294:INFO:_master_model_container: 14
2024-01-29 18:37:15,294:INFO:_display_container: 2
2024-01-29 18:37:15,294:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False)
2024-01-29 18:37:15,294:INFO:compare_models() successfully completed......................................
2024-01-29 18:37:15,322:INFO:Initializing create_model()
2024-01-29 18:37:15,322:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:37:15,322:INFO:Checking exceptions
2024-01-29 18:37:15,334:INFO:Importing libraries
2024-01-29 18:37:15,334:INFO:Copying training dataset
2024-01-29 18:37:15,342:INFO:Defining folds
2024-01-29 18:37:15,342:INFO:Declaring metric variables
2024-01-29 18:37:15,346:INFO:Importing untrained model
2024-01-29 18:37:15,350:INFO:Random Forest Classifier Imported successfully
2024-01-29 18:37:15,354:INFO:Starting cross validation
2024-01-29 18:37:15,362:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:37:16,098:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:16,106:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:16,110:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:16,142:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:16,146:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:16,154:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:16,154:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:16,158:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:16,162:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:16,166:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:16,174:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:16,178:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:16,182:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:16,199:INFO:Calculating mean and std
2024-01-29 18:37:16,199:INFO:Creating metrics dataframe
2024-01-29 18:37:16,203:INFO:Finalizing model
2024-01-29 18:37:16,308:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2024-01-29 18:37:16,308:INFO:[LightGBM] [Info] Number of positive: 498, number of negative: 2589
2024-01-29 18:37:16,312:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000260 seconds.
2024-01-29 18:37:16,312:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-01-29 18:37:16,312:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-01-29 18:37:16,312:INFO:[LightGBM] [Info] Total Bins 849
2024-01-29 18:37:16,312:INFO:[LightGBM] [Info] Number of data points in the train set: 3087, number of used features: 44
2024-01-29 18:37:16,312:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.161322 -> initscore=-1.648427
2024-01-29 18:37:16,312:INFO:[LightGBM] [Info] Start training from score -1.648427
2024-01-29 18:37:16,552:INFO:Uploading results into container
2024-01-29 18:37:16,552:INFO:Uploading model into container now
2024-01-29 18:37:16,560:INFO:_master_model_container: 15
2024-01-29 18:37:16,560:INFO:_display_container: 3
2024-01-29 18:37:16,560:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False)
2024-01-29 18:37:16,560:INFO:create_model() successfully completed......................................
2024-01-29 18:37:16,692:INFO:Initializing tune_model()
2024-01-29 18:37:16,692:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>)
2024-01-29 18:37:16,692:INFO:Checking exceptions
2024-01-29 18:37:16,708:INFO:Copying training dataset
2024-01-29 18:37:16,712:INFO:Checking base model
2024-01-29 18:37:16,712:INFO:Base model : Random Forest Classifier
2024-01-29 18:37:16,716:INFO:Declaring metric variables
2024-01-29 18:37:16,720:INFO:Defining Hyperparameters
2024-01-29 18:37:16,840:INFO:Tuning with n_jobs=-1
2024-01-29 18:37:16,840:INFO:Initializing RandomizedSearchCV
2024-01-29 18:37:39,336:INFO:best_params: {'actual_estimator__n_estimators': 300, 'actual_estimator__min_samples_split': 7, 'actual_estimator__min_samples_leaf': 2, 'actual_estimator__min_impurity_decrease': 0.001, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 9, 'actual_estimator__criterion': 'gini', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': True}
2024-01-29 18:37:39,336:INFO:Hyperparameter search completed
2024-01-29 18:37:39,336:INFO:SubProcess create_model() called ==================================
2024-01-29 18:37:39,336:INFO:Initializing create_model()
2024-01-29 18:37:39,336:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F5600AF070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 300, 'min_samples_split': 7, 'min_samples_leaf': 2, 'min_impurity_decrease': 0.001, 'max_features': 'log2', 'max_depth': 9, 'criterion': 'gini', 'class_weight': 'balanced_subsample', 'bootstrap': True})
2024-01-29 18:37:39,336:INFO:Checking exceptions
2024-01-29 18:37:39,336:INFO:Importing libraries
2024-01-29 18:37:39,336:INFO:Copying training dataset
2024-01-29 18:37:39,344:INFO:Defining folds
2024-01-29 18:37:39,344:INFO:Declaring metric variables
2024-01-29 18:37:39,348:INFO:Importing untrained model
2024-01-29 18:37:39,348:INFO:Declaring custom model
2024-01-29 18:37:39,352:INFO:Random Forest Classifier Imported successfully
2024-01-29 18:37:39,356:INFO:Starting cross validation
2024-01-29 18:37:39,364:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:37:41,562:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,570:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,574:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,578:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,578:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,586:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,586:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,590:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,594:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,594:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,606:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,614:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,638:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,646:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,650:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,898:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,898:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,902:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,902:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,906:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,906:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,955:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,958:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:41,962:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:42,066:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:42,070:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:42,074:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:42,306:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:42,310:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:42,310:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:42,318:INFO:Calculating mean and std
2024-01-29 18:37:42,318:INFO:Creating metrics dataframe
2024-01-29 18:37:42,322:INFO:Finalizing model
2024-01-29 18:37:42,438:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2024-01-29 18:37:42,438:INFO:[LightGBM] [Info] Number of positive: 498, number of negative: 2589
2024-01-29 18:37:42,442:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000243 seconds.
2024-01-29 18:37:42,442:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-01-29 18:37:42,442:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-01-29 18:37:42,442:INFO:[LightGBM] [Info] Total Bins 849
2024-01-29 18:37:42,442:INFO:[LightGBM] [Info] Number of data points in the train set: 3087, number of used features: 44
2024-01-29 18:37:42,442:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.161322 -> initscore=-1.648427
2024-01-29 18:37:42,442:INFO:[LightGBM] [Info] Start training from score -1.648427
2024-01-29 18:37:43,190:INFO:Uploading results into container
2024-01-29 18:37:43,190:INFO:Uploading model into container now
2024-01-29 18:37:43,190:INFO:_master_model_container: 16
2024-01-29 18:37:43,190:INFO:_display_container: 4
2024-01-29 18:37:43,190:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=9, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=2, min_samples_split=7,
                       min_weight_fraction_leaf=0.0, n_estimators=300,
                       n_jobs=-1, oob_score=False, random_state=3266, verbose=0,
                       warm_start=False)
2024-01-29 18:37:43,190:INFO:create_model() successfully completed......................................
2024-01-29 18:37:43,306:INFO:SubProcess create_model() end ==================================
2024-01-29 18:37:43,306:INFO:choose_better activated
2024-01-29 18:37:43,310:INFO:SubProcess create_model() called ==================================
2024-01-29 18:37:43,310:INFO:Initializing create_model()
2024-01-29 18:37:43,310:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-01-29 18:37:43,310:INFO:Checking exceptions
2024-01-29 18:37:43,314:INFO:Importing libraries
2024-01-29 18:37:43,314:INFO:Copying training dataset
2024-01-29 18:37:43,318:INFO:Defining folds
2024-01-29 18:37:43,318:INFO:Declaring metric variables
2024-01-29 18:37:43,318:INFO:Importing untrained model
2024-01-29 18:37:43,318:INFO:Declaring custom model
2024-01-29 18:37:43,318:INFO:Random Forest Classifier Imported successfully
2024-01-29 18:37:43,318:INFO:Starting cross validation
2024-01-29 18:37:43,326:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-01-29 18:37:44,626:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,634:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,642:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,642:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,642:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,646:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,646:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,646:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,650:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,654:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,654:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,658:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,674:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,682:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,686:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,898:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,902:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,906:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,910:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,914:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,918:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,986:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,990:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:44,994:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:45,035:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:45,038:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:45,042:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:45,110:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:45,114:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:45,114:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:45,138:INFO:Calculating mean and std
2024-01-29 18:37:45,138:INFO:Creating metrics dataframe
2024-01-29 18:37:45,138:INFO:Finalizing model
2024-01-29 18:37:45,250:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2024-01-29 18:37:45,250:INFO:[LightGBM] [Info] Number of positive: 498, number of negative: 2589
2024-01-29 18:37:45,250:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000243 seconds.
2024-01-29 18:37:45,250:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-01-29 18:37:45,250:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-01-29 18:37:45,250:INFO:[LightGBM] [Info] Total Bins 849
2024-01-29 18:37:45,250:INFO:[LightGBM] [Info] Number of data points in the train set: 3087, number of used features: 44
2024-01-29 18:37:45,254:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.161322 -> initscore=-1.648427
2024-01-29 18:37:45,254:INFO:[LightGBM] [Info] Start training from score -1.648427
2024-01-29 18:37:45,498:INFO:Uploading results into container
2024-01-29 18:37:45,498:INFO:Uploading model into container now
2024-01-29 18:37:45,498:INFO:_master_model_container: 17
2024-01-29 18:37:45,498:INFO:_display_container: 5
2024-01-29 18:37:45,502:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False)
2024-01-29 18:37:45,502:INFO:create_model() successfully completed......................................
2024-01-29 18:37:45,615:INFO:SubProcess create_model() end ==================================
2024-01-29 18:37:45,615:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False) result for Accuracy is 0.9796
2024-01-29 18:37:45,615:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='gini',
                       max_depth=9, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.001,
                       min_samples_leaf=2, min_samples_split=7,
                       min_weight_fraction_leaf=0.0, n_estimators=300,
                       n_jobs=-1, oob_score=False, random_state=3266, verbose=0,
                       warm_start=False) result for Accuracy is 0.8921
2024-01-29 18:37:45,615:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False) is best model
2024-01-29 18:37:45,615:INFO:choose_better completed
2024-01-29 18:37:45,615:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-01-29 18:37:45,623:INFO:_master_model_container: 17
2024-01-29 18:37:45,623:INFO:_display_container: 4
2024-01-29 18:37:45,627:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False)
2024-01-29 18:37:45,627:INFO:tune_model() successfully completed......................................
2024-01-29 18:37:45,763:INFO:Initializing plot_model()
2024-01-29 18:37:45,767:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, system=True)
2024-01-29 18:37:45,767:INFO:Checking exceptions
2024-01-29 18:37:45,799:INFO:Preloading libraries
2024-01-29 18:37:45,811:INFO:Copying training dataset
2024-01-29 18:37:45,811:INFO:Plot type: auc
2024-01-29 18:37:46,245:INFO:Fitting Model
2024-01-29 18:37:46,253:WARNING:D:\anconda\lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-01-29 18:37:46,257:INFO:Scoring test/hold-out set
2024-01-29 18:37:46,497:INFO:Visual Rendered Successfully
2024-01-29 18:37:46,613:INFO:plot_model() successfully completed......................................
2024-01-29 18:37:46,642:INFO:Initializing plot_model()
2024-01-29 18:37:46,642:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, system=True)
2024-01-29 18:37:46,642:INFO:Checking exceptions
2024-01-29 18:37:46,674:INFO:Preloading libraries
2024-01-29 18:37:46,686:INFO:Copying training dataset
2024-01-29 18:37:46,686:INFO:Plot type: confusion_matrix
2024-01-29 18:37:46,986:INFO:Fitting Model
2024-01-29 18:37:46,986:WARNING:D:\anconda\lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2024-01-29 18:37:46,990:INFO:Scoring test/hold-out set
2024-01-29 18:37:47,158:INFO:Visual Rendered Successfully
2024-01-29 18:37:47,282:INFO:plot_model() successfully completed......................................
2024-01-29 18:37:47,298:INFO:Initializing plot_model()
2024-01-29 18:37:47,298:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, system=True)
2024-01-29 18:37:47,298:INFO:Checking exceptions
2024-01-29 18:37:47,330:INFO:Preloading libraries
2024-01-29 18:37:47,342:INFO:Copying training dataset
2024-01-29 18:37:47,342:INFO:Plot type: feature
2024-01-29 18:37:47,342:WARNING:No coef_ found. Trying feature_importances_
2024-01-29 18:37:47,510:INFO:Visual Rendered Successfully
2024-01-29 18:37:47,634:INFO:plot_model() successfully completed......................................
2024-01-29 18:37:47,654:INFO:Initializing predict_model()
2024-01-29 18:37:47,654:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F507E67490>)
2024-01-29 18:37:47,654:INFO:Checking exceptions
2024-01-29 18:37:47,654:INFO:Preloading libraries
2024-01-29 18:37:47,968:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:47,979:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:47,986:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:48,169:INFO:Initializing save_model()
2024-01-29 18:37:48,169:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False), model_name=best-model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Swapnil\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['EmployeeID', 'Age',
                                             'DistanceFromHome', 'Education',
                                             'EmployeeCount', 'JobLevel',
                                             'MonthlyIncome',
                                             'NumC...
                                                                                         learning_rate=0.1,
                                                                                         max_depth=-1,
                                                                                         min_child_samples=20,
                                                                                         min_child_weight=0.001,
                                                                                         min_split_gain=0.0,
                                                                                         n_estimators=100,
                                                                                         n_jobs=None,
                                                                                         num_leaves=31,
                                                                                         objective=None,
                                                                                         random_state=None,
                                                                                         reg_alpha=0.0,
                                                                                         reg_lambda=0.0,
                                                                                         subsample=1.0,
                                                                                         subsample_for_bin=200000,
                                                                                         subsample_freq=0),
                                                                importance_getter='auto',
                                                                max_features=5,
                                                                norm_order=1,
                                                                prefit=False,
                                                                threshold=-inf)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-01-29 18:37:48,169:INFO:Adding model into prep_pipe
2024-01-29 18:37:48,230:INFO:best-model.pkl saved in current working directory
2024-01-29 18:37:48,257:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['EmployeeID', 'Age',
                                             'DistanceFromHome', 'Education',
                                             'EmployeeCount', 'JobLevel',
                                             'MonthlyIncome',
                                             'NumCompaniesWorked',
                                             'PercentSalaryHike',
                                             'Stand...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        n_estimators=100, n_jobs=-1,
                                        oob_score=False, random_state=3266,
                                        verbose=0, warm_start=False))],
         verbose=False)
2024-01-29 18:37:48,258:INFO:save_model() successfully completed......................................
2024-01-29 18:37:48,801:INFO:Initializing predict_model()
2024-01-29 18:37:48,802:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F5602E4880>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3266, verbose=0, warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F50A3768C0>)
2024-01-29 18:37:48,802:INFO:Checking exceptions
2024-01-29 18:37:48,802:INFO:Preloading libraries
2024-01-29 18:37:48,803:INFO:Set up data.
2024-01-29 18:37:48,813:INFO:Set up index.
2024-01-29 18:37:48,976:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:48,978:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-01-29 18:37:48,980:WARNING:D:\anconda\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

